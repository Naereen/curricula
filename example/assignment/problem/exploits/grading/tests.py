from pathlib import Path

from curricula.grade.shortcuts import *
from curricula.grade.setup.check.common import check_file_exists
from curricula.grade.setup.build.common import build_gpp_executable
from curricula.library import files

GPP_OPTIONS = ("-Wall", "-std=c++11")

grader = Grader()
grader.sandbox.enable_user_demotion()


@grader.setup.check(sanity=True)
def check_exploits(context: Context, resources: dict) -> CheckResult:
    """Check whether exploits.cpp has been submitted."""

    resources["exploits_source_path"] = context.problem_target_path.joinpath("exploits.cpp")
    return check_file_exists(resources["exploits_source_path"])


@grader.setup.build(passing={"check_exploits"}, sanity=True)
def build_exploits(context: Context, exploits_source_path: Path, resources: dict) -> BuildResult:
    """Compile the program with gcc."""

    resources["exploits_path"] = context.problem_target_path.joinpath("exploits")
    result, resources["exploits"] = build_gpp_executable(
        source_path=exploits_source_path,
        destination_path=resources["exploits_path"],
        gpp_options=GPP_OPTIONS)
    return result


@grader.test.correctness(passing={"build_exploits"})
def run_exploits(exploits: Executable) -> CorrectnessResult:
    """Run the program."""

    runtime = exploits.execute()
    return CorrectnessResult(passing=runtime.code == 0, runtime=runtime.dump())


@grader.teardown.cleanup(passing={"build_exploits"})
def cleanup(exploits_path: Path):
    """Clean up executables."""

    if exploits_path.is_file():
        files.delete_file(exploits_path)
